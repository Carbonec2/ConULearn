DROP TABLE IF EXISTS users;
CREATE TABLE users(
id int(8) NOT NULL,
password VARCHAR(20) NOT NULL,
PRIMARY KEY (id));

DROP TABLE IF EXISTS tutors;
CREATE TABLE tutors(
id INT(8),
tname VARCHAR(20),
PRIMARY KEY(id),
FOREIGN KEY(id) REFERENCES users(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE);

DROP TABLE IF EXISTS students;
CREATE TABLE students(
id INT(8),
sname VARCHAR(20),
PRIMARY KEY(id),
FOREIGN KEY(id) REFERENCES users(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,


DROP TABLE IF EXISTS professors;
CREATE TABLE professors(
id INT(8),
pname VARCHAR(20),
PRIMARY KEY(id),
FOREIGN KEY(id) REFERENCES users(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE);

DROP TABLE IF EXISTS assignments;
CREATE TABLE assignments(
anum INT(8),
aname VARCHAR(20),
PRIMARY KEY(anum));

DROP TABLE IF EXISTS files;
CREATE TABLE files(
fname VARCHAR(20),
status VARCHAR(20),
anum INT(8),
fid INT(8) NOT NULL AUTO_INCREMENT,
PRIMARY KEY(fid, fname, id, anum),
FOREIGN KEY(id) REFERENCES users(id)
	ON DELETE CASCADE
	ON UPDATE CASCADE,
FOREIGN KEY(anum) REFERENCES assignments(anum)
	ON DELETE CASCADE
	ON UPDATE CASCADE);

create table delete_ta(
fid int(8),
del_time datetime default current_timestamp,
primary key (fid),
foreign key (fid) references version (fid)
ON DELETE CASCADE
ON UPDATE CASCADE);

%%
delimiter $$
create trigger delete_move
after update on version 
for each row 
begin
if(new.status= 'deleted') then
insert into delete_ta(fid) values(new.fid);
elseif(new.status = 'non-exist') then 
delete from delete_ta 
where (fid= new.fid); 
end if; 
end $$
delimiter ;
%%

insert into users values(111, 111);

insert into professors values(222, 'Prof');

insert into tutors values(111, 'Tutors');
